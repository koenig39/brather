{
    "sourceFile": "app.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 79,
            "patches": [
                {
                    "date": 1729789107734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1729789125474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n \r\n # Route for the form page\r\n @app.route('/')\r\n def index():\r\n-    return render_template('./templates/form.html')\r\n+    return render_template('./form.html')\r\n \r\n # Route to handle form submission\r\n @app.route('/submit', methods=['POST'])\r\n def submit():\r\n"
                },
                {
                    "date": 1729789157468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n \r\n # Route for the form page\r\n @app.route('/')\r\n def index():\r\n-    return render_template('./form.html')\r\n+    return render_template('form.html')\r\n \r\n # Route to handle form submission\r\n @app.route('/submit', methods=['POST'])\r\n def submit():\r\n"
                },
                {
                    "date": 1729789892991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,83 @@\n from flask import Flask, render_template, request, redirect\r\n import csv\r\n+from datetime import datetime\r\n+from PIL import Image, ImageDraw, ImageFont\r\n \r\n app = Flask(__name__)\r\n \r\n+# Function to generate the label and print it\r\n+def print_label(name, company, printer_ip):\r\n+    printer_model = 'QL-820NWB'\r\n+    qlr = BrotherQLRaster(printer_model)\r\n+    qlr.exception_on_warning = True\r\n+\r\n+    # Open base label image\r\n+    label_image = Image.open(\"Nameplt5.png\")\r\n+\r\n+    # Create a copy of the image and draw text\r\n+    image = label_image.copy()\r\n+    draw = ImageDraw.Draw(image)\r\n+\r\n+    # Current date\r\n+    today_date = datetime.now().strftime(\"%d-%m-%Y\")\r\n+\r\n+    # Font details\r\n+    try:\r\n+        name_font = ImageFont.truetype(\"arial.ttf\", 100) \r\n+        company_font = ImageFont.truetype(\"arial.ttf\", 75)\r\n+        date_font = ImageFont.truetype(\"arial.ttf\", 75)\r\n+    except IOError:\r\n+        print(\"Font file not found.\")\r\n+        return\r\n+\r\n+    # Text positions\r\n+    name_position = (86.4, 200)\r\n+    company_position = (86.4, 400)\r\n+    date_position = (86.4, 550)\r\n+\r\n+    # Draw the text\r\n+    draw.text(name_position, name, fill=\"black\", font=name_font)\r\n+    draw.text(company_position, company, fill=\"black\", font=company_font)\r\n+    draw.text(date_position, today_date, fill=\"black\", font=date_font)\r\n+\r\n+    # Save the generated label image\r\n+    image_path = f\"{name}_label.png\"\r\n+    image.save(image_path)\r\n+\r\n+    # Convert image to raster for printing\r\n+    ql_code = convert(qlr=qlr, images=[image_path], label='62x100', rotate='auto', name=name, cut=True, dither=False, threshold=70, compress=True)\r\n+\r\n+    # Send the print job over network using the printer's IP\r\n+    backend = BrotherQLBackendNetwork(printer_ip)\r\n+    send(instructions=ql_code, backend_identifier=backend, printer_identifier=printer_ip, blocking=True)\r\n+\r\n+    return \"Printed\"\r\n+\r\n # Route for the form page\r\n @app.route('/')\r\n def index():\r\n     return render_template('form.html')\r\n \r\n-# Route to handle form submission\r\n+# Route to handle form submission and print the label\r\n @app.route('/submit', methods=['POST'])\r\n def submit():\r\n     if request.method == 'POST':\r\n         fname = request.form['fname']\r\n         lname = request.form['lname']\r\n         company = request.form['company']\r\n         contact = request.form['contact']\r\n-        printed = 'No'\r\n+        printer_ip = request.form['printer_ip']  # Added printer IP input\r\n \r\n         # Save to CSV\r\n         with open('data.csv', mode='a', newline='') as file:\r\n             writer = csv.writer(file)\r\n-            writer.writerow([fname, lname, company, contact, printed])\r\n+            writer.writerow([fname, lname, company, contact, 'No'])\r\n \r\n+        # Generate label and print\r\n+        full_name = f\"{fname} {lname}\"\r\n+        print_label(full_name, company, printer_ip)\r\n+\r\n         return redirect('/')\r\n \r\n if __name__ == '__main__':\r\n     app.run(debug=True)\r\n"
                },
                {
                    "date": 1729790287648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,57 +1,65 @@\n from flask import Flask, render_template, request, redirect\r\n import csv\r\n from datetime import datetime\r\n from PIL import Image, ImageDraw, ImageFont\r\n+from brother_ql.conversion import convert\r\n+from brother_ql.backends.helpers import send\r\n+from brother_ql.raster import BrotherQLRaster\r\n+from brother_ql.backends.network import BrotherQLBackendNetwork  # Import backend for network connection\r\n \r\n app = Flask(__name__)\r\n \r\n-# Function to generate the label and print it\r\n-def print_label(name, company, printer_ip):\r\n+# Define static IP address for the printer\r\n+PRINTER_IP = '10.4.6.76'  # Static IP for the printer\r\n+\r\n+# Function to print the label using Brother QL printer over the network\r\n+def print_label(name, company):\r\n+    # Printer setup\r\n     printer_model = 'QL-820NWB'\r\n     qlr = BrotherQLRaster(printer_model)\r\n     qlr.exception_on_warning = True\r\n \r\n-    # Open base label image\r\n-    label_image = Image.open(\"Nameplt5.png\")\r\n+    # Open the base label image\r\n+    label_image = Image.open(\"Nameplt5.png\")  # Ensure the image is in your project directory\r\n \r\n-    # Create a copy of the image and draw text\r\n+    # Create a copy of the image and draw on it\r\n     image = label_image.copy()\r\n     draw = ImageDraw.Draw(image)\r\n \r\n-    # Current date\r\n+    # Set up text details\r\n     today_date = datetime.now().strftime(\"%d-%m-%Y\")\r\n-\r\n-    # Font details\r\n     try:\r\n         name_font = ImageFont.truetype(\"arial.ttf\", 100) \r\n         company_font = ImageFont.truetype(\"arial.ttf\", 75)\r\n         date_font = ImageFont.truetype(\"arial.ttf\", 75)\r\n     except IOError:\r\n-        print(\"Font file not found.\")\r\n+        print(\"Font file not found. Please provide the correct font path.\")\r\n         return\r\n \r\n-    # Text positions\r\n+    # Define positions\r\n     name_position = (86.4, 200)\r\n     company_position = (86.4, 400)\r\n     date_position = (86.4, 550)\r\n \r\n-    # Draw the text\r\n+    # Draw text on the image\r\n     draw.text(name_position, name, fill=\"black\", font=name_font)\r\n     draw.text(company_position, company, fill=\"black\", font=company_font)\r\n     draw.text(date_position, today_date, fill=\"black\", font=date_font)\r\n \r\n-    # Save the generated label image\r\n+    # Save the image\r\n     image_path = f\"{name}_label.png\"\r\n     image.save(image_path)\r\n \r\n-    # Convert image to raster for printing\r\n+    # Convert image to raster and print\r\n     ql_code = convert(qlr=qlr, images=[image_path], label='62x100', rotate='auto', name=name, cut=True, dither=False, threshold=70, compress=True)\r\n \r\n-    # Send the print job over network using the printer's IP\r\n-    backend = BrotherQLBackendNetwork(printer_ip)\r\n-    send(instructions=ql_code, backend_identifier=backend, printer_identifier=printer_ip, blocking=True)\r\n+    # Setup network backend with static IP address\r\n+    backend = BrotherQLBackendNetwork(PRINTER_IP)\r\n \r\n+    # Send the print job to the network printer\r\n+    send(instructions=ql_code, backend_identifier=backend, printer_identifier=PRINTER_IP, blocking=True)\r\n+\r\n     return \"Printed\"\r\n \r\n # Route for the form page\r\n @app.route('/')\r\n@@ -65,18 +73,17 @@\n         fname = request.form['fname']\r\n         lname = request.form['lname']\r\n         company = request.form['company']\r\n         contact = request.form['contact']\r\n-        printer_ip = request.form['printer_ip']  # Added printer IP input\r\n \r\n         # Save to CSV\r\n         with open('data.csv', mode='a', newline='') as file:\r\n             writer = csv.writer(file)\r\n             writer.writerow([fname, lname, company, contact, 'No'])\r\n \r\n         # Generate label and print\r\n         full_name = f\"{fname} {lname}\"\r\n-        print_label(full_name, company, printer_ip)\r\n+        print_label(full_name, company)\r\n \r\n         return redirect('/')\r\n \r\n if __name__ == '__main__':\r\n"
                },
                {
                    "date": 1729790964856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,90 +1,94 @@\n from flask import Flask, render_template, request, redirect\r\n import csv\r\n+from PIL import Image, ImageDraw, ImageFont\r\n from datetime import datetime\r\n-from PIL import Image, ImageDraw, ImageFont\r\n-from brother_ql.conversion import convert\r\n-from brother_ql.backends.helpers import send\r\n-from brother_ql.raster import BrotherQLRaster\r\n-from brother_ql.backends.network import BrotherQLBackendNetwork  # Import backend for network connection\r\n+import subprocess\r\n \r\n app = Flask(__name__)\r\n \r\n-# Define static IP address for the printer\r\n-PRINTER_IP = '10.4.6.76'  # Static IP for the printer\r\n+# Function to generate badge with user data\r\n+def getBadge(fname, lname, cname):\r\n+    # Create a new image with a white background\r\n+    height = 696\r\n+    width = 1109\r\n+    background_color = (255, 255, 255)  # white color\r\n+    background = Image.new('RGB', (width, height), background_color)\r\n \r\n-# Function to print the label using Brother QL printer over the network\r\n-def print_label(name, company):\r\n-    # Printer setup\r\n-    printer_model = 'QL-820NWB'\r\n-    qlr = BrotherQLRaster(printer_model)\r\n-    qlr.exception_on_warning = True\r\n-\r\n-    # Open the base label image\r\n-    label_image = Image.open(\"Nameplt5.png\")  # Ensure the image is in your project directory\r\n-\r\n-    # Create a copy of the image and draw on it\r\n-    image = label_image.copy()\r\n-    draw = ImageDraw.Draw(image)\r\n-\r\n-    # Set up text details\r\n-    today_date = datetime.now().strftime(\"%d-%m-%Y\")\r\n+    # Open and resize the logo image to overlay as background\r\n     try:\r\n-        name_font = ImageFont.truetype(\"arial.ttf\", 100) \r\n-        company_font = ImageFont.truetype(\"arial.ttf\", 75)\r\n-        date_font = ImageFont.truetype(\"arial.ttf\", 75)\r\n+        background_image = Image.open('den-logo.png')  # Logo should be in the project folder\r\n+        background_image = background_image.resize((400, 400))\r\n     except IOError:\r\n-        print(\"Font file not found. Please provide the correct font path.\")\r\n-        return\r\n+        return \"Error: Logo file not found!\"\r\n \r\n-    # Define positions\r\n-    name_position = (86.4, 200)\r\n-    company_position = (86.4, 400)\r\n-    date_position = (86.4, 550)\r\n+    # Paste the logo onto the new image\r\n+    background.paste(background_image, (50, 100))\r\n \r\n-    # Draw text on the image\r\n-    draw.text(name_position, name, fill=\"black\", font=name_font)\r\n-    draw.text(company_position, company, fill=\"black\", font=company_font)\r\n-    draw.text(date_position, today_date, fill=\"black\", font=date_font)\r\n+    # Add text (first name, last name, company) to the image\r\n+    draw = ImageDraw.Draw(background)\r\n+    \r\n+    # Add name\r\n+    name_text = f\"{fname}\\n{lname}\"\r\n+    name_font = ImageFont.truetype(\"arial.ttf\", 96)  # Specify font and size\r\n+    name_color = (0, 0, 0)  # black color\r\n+    name_position = (550, 150)  # Position for name text\r\n+    draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n+    \r\n+    # Add company name\r\n+    company_text = f\"{cname}\"\r\n+    company_font = ImageFont.truetype(\"arial.ttf\", 56)  # Specify font and size\r\n+    company_color = (111, 111, 111)  # grey color\r\n+    company_position = (550, 370)  # Position for company text\r\n+    draw.text(company_position, company_text, fill=company_color, font=company_font)\r\n \r\n-    # Save the image\r\n-    image_path = f\"{name}_label.png\"\r\n-    image.save(image_path)\r\n+    # Save the generated badge image\r\n+    image_file = 'badge.png'\r\n+    background.save(image_file)\r\n+    \r\n+    return image_file\r\n \r\n-    # Convert image to raster and print\r\n-    ql_code = convert(qlr=qlr, images=[image_path], label='62x100', rotate='auto', name=name, cut=True, dither=False, threshold=70, compress=True)\r\n+# Function to send the generated image to the printer\r\n+def sendToPrint(image_file):\r\n+    # Define the print command using subprocess\r\n+    command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n+    \r\n+    try:\r\n+        # Execute the print command\r\n+        subprocess.run(command, shell=True, check=True)\r\n+        return \"Print command executed successfully.\"\r\n+    except subprocess.CalledProcessError as e:\r\n+        return f\"Error: Failed to execute print command. {e}\"\r\n \r\n-    # Setup network backend with static IP address\r\n-    backend = BrotherQLBackendNetwork(PRINTER_IP)\r\n-\r\n-    # Send the print job to the network printer\r\n-    send(instructions=ql_code, backend_identifier=backend, printer_identifier=PRINTER_IP, blocking=True)\r\n-\r\n-    return \"Printed\"\r\n-\r\n # Route for the form page\r\n @app.route('/')\r\n def index():\r\n     return render_template('form.html')\r\n \r\n-# Route to handle form submission and print the label\r\n+# Route to handle form submission and print the badge\r\n @app.route('/submit', methods=['POST'])\r\n def submit():\r\n     if request.method == 'POST':\r\n+        # Retrieve data from the form\r\n         fname = request.form['fname']\r\n         lname = request.form['lname']\r\n         company = request.form['company']\r\n         contact = request.form['contact']\r\n \r\n-        # Save to CSV\r\n+        # Save data to CSV\r\n         with open('data.csv', mode='a', newline='') as file:\r\n             writer = csv.writer(file)\r\n             writer.writerow([fname, lname, company, contact, 'No'])\r\n \r\n-        # Generate label and print\r\n-        full_name = f\"{fname} {lname}\"\r\n-        print_label(full_name, company)\r\n+        # Generate the badge image\r\n+        image_file = getBadge(fname, lname, company)\r\n \r\n+        # If badge generation was successful, send it to print\r\n+        if image_file:\r\n+            print_status = sendToPrint(image_file)\r\n+        else:\r\n+            print_status = \"Error: Badge generation failed.\"\r\n+\r\n         return redirect('/')\r\n \r\n if __name__ == '__main__':\r\n     app.run(debug=True)\r\n"
                },
                {
                    "date": 1729790986475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,10 @@\n         image_file = getBadge(fname, lname, company)\r\n \r\n         # If badge generation was successful, send it to print\r\n         if image_file:\r\n-            print_status = sendToPrint(image_file)\r\n+            # print_status = sendToPrint(image_file)\r\n+            print(\"YES!!!!!!!!!!!!!!!!=========>\")\r\n         else:\r\n             print_status = \"Error: Badge generation failed.\"\r\n \r\n         return redirect('/')\r\n"
                },
                {
                    "date": 1729791002182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,95 @@\n+from flask import Flask, render_template, request, redirect\r\n+import csv\r\n+from PIL import Image, ImageDraw, ImageFont\r\n+from datetime import datetime\r\n+import subprocess\r\n+\r\n+app = Flask(__name__)\r\n+\r\n+# Function to generate badge with user data\r\n+def getBadge(fname, lname, cname):\r\n+    # Create a new image with a white background\r\n+    height = 696\r\n+    width = 1109\r\n+    background_color = (255, 255, 255)  # white color\r\n+    background = Image.new('RGB', (width, height), background_color)\r\n+\r\n+    # Open and resize the logo image to overlay as background\r\n+    try:\r\n+        background_image = Image.open('den-logo.png')  # Logo should be in the project folder\r\n+        background_image = background_image.resize((400, 400))\r\n+    except IOError:\r\n+        return \"Error: Logo file not found!\"\r\n+\r\n+    # Paste the logo onto the new image\r\n+    background.paste(background_image, (50, 100))\r\n+\r\n+    # Add text (first name, last name, company) to the image\r\n+    draw = ImageDraw.Draw(background)\r\n+    \r\n+    # Add name\r\n+    name_text = f\"{fname}\\n{lname}\"\r\n+    name_font = ImageFont.truetype(\"arial.ttf\", 96)  # Specify font and size\r\n+    name_color = (0, 0, 0)  # black color\r\n+    name_position = (550, 150)  # Position for name text\r\n+    draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n+    \r\n+    # Add company name\r\n+    company_text = f\"{cname}\"\r\n+    company_font = ImageFont.truetype(\"arial.ttf\", 56)  # Specify font and size\r\n+    company_color = (111, 111, 111)  # grey color\r\n+    company_position = (550, 370)  # Position for company text\r\n+    draw.text(company_position, company_text, fill=company_color, font=company_font)\r\n+\r\n+    # Save the generated badge image\r\n+    image_file = 'badge.png'\r\n+    background.save(image_file)\r\n+    \r\n+    return image_file\r\n+\r\n+# Function to send the generated image to the printer\r\n+def sendToPrint(image_file):\r\n+    # Define the print command using subprocess\r\n+    command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n+    \r\n+    try:\r\n+        # Execute the print command\r\n+        subprocess.run(command, shell=True, check=True)\r\n+        return \"Print command executed successfully.\"\r\n+    except subprocess.CalledProcessError as e:\r\n+        return f\"Error: Failed to execute print command. {e}\"\r\n+\r\n+# Route for the form page\r\n+@app.route('/')\r\n+def index():\r\n+    return render_template('form.html')\r\n+\r\n+# Route to handle form submission and print the badge\r\n+@app.route('/submit', methods=['POST'])\r\n+def submit():\r\n+    if request.method == 'POST':\r\n+        # Retrieve data from the form\r\n+        fname = request.form['fname']\r\n+        lname = request.form['lname']\r\n+        company = request.form['company']\r\n+        contact = request.form['contact']\r\n+\r\n+        # Save data to CSV\r\n+        with open('data.csv', mode='a', newline='') as file:\r\n+            writer = csv.writer(file)\r\n+            writer.writerow([fname, lname, company, contact, 'No'])\r\n+\r\n+        # Generate the badge image\r\n+        image_file = getBadge(fname, lname, company)\r\n+\r\n+        # If badge generation was successful, send it to print\r\n+        if image_file:\r\n+            print_status = sendToPrint(image_file)\r\n+            print(\"YES!!!!!!!!!!!!!!!!=========>\")\r\n+        else:\r\n+            print_status = \"Error: Badge generation failed.\"\r\n+\r\n+        return redirect('/')\r\n+\r\n+if __name__ == '__main__':\r\n+    app.run(debug=True)\r\n"
                },
                {
                    "date": 1729791201821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n \r\n         # Save data to CSV\r\n         with open('data.csv', mode='a', newline='') as file:\r\n             writer = csv.writer(file)\r\n-            writer.writerow([fname, lname, company, contact, 'No'])\r\n+            writer.writerow([fname, lname, company, contact, 0])\r\n \r\n         # Generate the badge image\r\n         image_file = getBadge(fname, lname, company)\r\n \r\n@@ -92,99 +92,4 @@\n         return redirect('/')\r\n \r\n if __name__ == '__main__':\r\n     app.run(debug=True)\r\n-from flask import Flask, render_template, request, redirect\r\n-import csv\r\n-from PIL import Image, ImageDraw, ImageFont\r\n-from datetime import datetime\r\n-import subprocess\r\n-\r\n-app = Flask(__name__)\r\n-\r\n-# Function to generate badge with user data\r\n-def getBadge(fname, lname, cname):\r\n-    # Create a new image with a white background\r\n-    height = 696\r\n-    width = 1109\r\n-    background_color = (255, 255, 255)  # white color\r\n-    background = Image.new('RGB', (width, height), background_color)\r\n-\r\n-    # Open and resize the logo image to overlay as background\r\n-    try:\r\n-        background_image = Image.open('den-logo.png')  # Logo should be in the project folder\r\n-        background_image = background_image.resize((400, 400))\r\n-    except IOError:\r\n-        return \"Error: Logo file not found!\"\r\n-\r\n-    # Paste the logo onto the new image\r\n-    background.paste(background_image, (50, 100))\r\n-\r\n-    # Add text (first name, last name, company) to the image\r\n-    draw = ImageDraw.Draw(background)\r\n-    \r\n-    # Add name\r\n-    name_text = f\"{fname}\\n{lname}\"\r\n-    name_font = ImageFont.truetype(\"arial.ttf\", 96)  # Specify font and size\r\n-    name_color = (0, 0, 0)  # black color\r\n-    name_position = (550, 150)  # Position for name text\r\n-    draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n-    \r\n-    # Add company name\r\n-    company_text = f\"{cname}\"\r\n-    company_font = ImageFont.truetype(\"arial.ttf\", 56)  # Specify font and size\r\n-    company_color = (111, 111, 111)  # grey color\r\n-    company_position = (550, 370)  # Position for company text\r\n-    draw.text(company_position, company_text, fill=company_color, font=company_font)\r\n-\r\n-    # Save the generated badge image\r\n-    image_file = 'badge.png'\r\n-    background.save(image_file)\r\n-    \r\n-    return image_file\r\n-\r\n-# Function to send the generated image to the printer\r\n-def sendToPrint(image_file):\r\n-    # Define the print command using subprocess\r\n-    command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n-    \r\n-    try:\r\n-        # Execute the print command\r\n-        subprocess.run(command, shell=True, check=True)\r\n-        return \"Print command executed successfully.\"\r\n-    except subprocess.CalledProcessError as e:\r\n-        return f\"Error: Failed to execute print command. {e}\"\r\n-\r\n-# Route for the form page\r\n-@app.route('/')\r\n-def index():\r\n-    return render_template('form.html')\r\n-\r\n-# Route to handle form submission and print the badge\r\n-@app.route('/submit', methods=['POST'])\r\n-def submit():\r\n-    if request.method == 'POST':\r\n-        # Retrieve data from the form\r\n-        fname = request.form['fname']\r\n-        lname = request.form['lname']\r\n-        company = request.form['company']\r\n-        contact = request.form['contact']\r\n-\r\n-        # Save data to CSV\r\n-        with open('data.csv', mode='a', newline='') as file:\r\n-            writer = csv.writer(file)\r\n-            writer.writerow([fname, lname, company, contact, 'No'])\r\n-\r\n-        # Generate the badge image\r\n-        image_file = getBadge(fname, lname, company)\r\n-\r\n-        # If badge generation was successful, send it to print\r\n-        if image_file:\r\n-            # print_status = sendToPrint(image_file)\r\n-            print(\"YES!!!!!!!!!!!!!!!!=========>\")\r\n-        else:\r\n-            print_status = \"Error: Badge generation failed.\"\r\n-\r\n-        return redirect('/')\r\n-\r\n-if __name__ == '__main__':\r\n-    app.run(debug=True)\r\n"
                },
                {
                    "date": 1729791321345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n \r\n # Function to send the generated image to the printer\r\n def sendToPrint(image_file):\r\n     # Define the print command using subprocess\r\n-    command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n+    command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 siros_logo.png\"\r\n     \r\n     try:\r\n         # Execute the print command\r\n         subprocess.run(command, shell=True, check=True)\r\n"
                },
                {
                    "date": 1729791341704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n \r\n # Function to send the generated image to the printer\r\n def sendToPrint(image_file):\r\n     # Define the print command using subprocess\r\n-    command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 siros_logo.png\"\r\n+    command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 ./siros_logo.png\"\r\n     \r\n     try:\r\n         # Execute the print command\r\n         subprocess.run(command, shell=True, check=True)\r\n"
                },
                {
                    "date": 1729791361249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n \r\n # Function to send the generated image to the printer\r\n def sendToPrint(image_file):\r\n     # Define the print command using subprocess\r\n-    command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 ./siros_logo.png\"\r\n+    command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 ./siros-logo.png\"\r\n     \r\n     try:\r\n         # Execute the print command\r\n         subprocess.run(command, shell=True, check=True)\r\n"
                },
                {
                    "date": 1729792279128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n \r\n # Function to send the generated image to the printer\r\n def sendToPrint(image_file):\r\n     # Define the print command using subprocess\r\n-    command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 ./siros-logo.png\"\r\n+    command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n     \r\n     try:\r\n         # Execute the print command\r\n         subprocess.run(command, shell=True, check=True)\r\n@@ -61,9 +61,11 @@\n \r\n # Route for the form page\r\n @app.route('/')\r\n def index():\r\n-    return render_template('form.html')\r\n+    response = app.response_class()\r\n+    response.headers.set(\"ngrok-skip-browser-warning\", \"true\")\r\n+    return render_template('form.html'), 200, response.headers\r\n \r\n # Route to handle form submission and print the badge\r\n @app.route('/submit', methods=['POST'])\r\n def submit():\r\n"
                },
                {
                    "date": 1729792412425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     background = Image.new('RGB', (width, height), background_color)\r\n \r\n     # Open and resize the logo image to overlay as background\r\n     try:\r\n-        background_image = Image.open('den-logo.png')  # Logo should be in the project folder\r\n+        background_image = Image.open('./siros-logo.png')  # Logo should be in the project folder\r\n         background_image = background_image.resize((400, 400))\r\n     except IOError:\r\n         return \"Error: Logo file not found!\"\r\n \r\n"
                },
                {
                    "date": 1729792429679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n     command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n     \r\n     try:\r\n         # Execute the print command\r\n-        subprocess.run(command, shell=True, check=True)\r\n+        # subprocess.run(command, shell=True, check=True)\r\n         return \"Print command executed successfully.\"\r\n     except subprocess.CalledProcessError as e:\r\n         return f\"Error: Failed to execute print command. {e}\"\r\n \r\n"
                },
                {
                    "date": 1729792538270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n         image_file = getBadge(fname, lname, company)\r\n \r\n         # If badge generation was successful, send it to print\r\n         if image_file:\r\n-            print_status = sendToPrint(image_file)\r\n+            # print_status = sendToPrint(image_file)\r\n             print(\"YES!!!!!!!!!!!!!!!!=========>\")\r\n         else:\r\n             print_status = \"Error: Badge generation failed.\"\r\n \r\n"
                },
                {
                    "date": 1729792594516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,98 @@\n+from flask import Flask, render_template, request, redirect\r\n+import csv\r\n+from PIL import Image, ImageDraw, ImageFont\r\n+from datetime import datetime\r\n+import subprocess\r\n+\r\n+app = Flask(__name__)\r\n+\r\n+# Function to generate badge with user data\r\n+def getBadge(fname, lname, cname):\r\n+    # Create a new image with a white background\r\n+    height = 696\r\n+    width = 1109\r\n+    background_color = (255, 255, 255)  # white color\r\n+    background = Image.new('RGB', (width, height), background_color)\r\n+\r\n+    # Open and resize the logo image to overlay as background\r\n+    try:\r\n+        background_image = Image.open('./siros-logo.png')  # Logo should be in the project folder\r\n+        background_image = background_image.resize((400, 400))\r\n+    except IOError:\r\n+        return \"Error: Logo file not found!\"\r\n+\r\n+    # Paste the logo onto the new image\r\n+    background.paste(background_image, (50, 100))\r\n+\r\n+    # Add text (first name, last name, company) to the image\r\n+    draw = ImageDraw.Draw(background)\r\n+    \r\n+    # Add name\r\n+    name_text = f\"{fname}\\n{lname}\"\r\n+    name_font = ImageFont.truetype(\"arial.ttf\", 96)  # Specify font and size\r\n+    name_color = (0, 0, 0)  # black color\r\n+    name_position = (550, 150)  # Position for name text\r\n+    draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n+    \r\n+    # Add company name\r\n+    company_text = f\"{cname}\"\r\n+    company_font = ImageFont.truetype(\"arial.ttf\", 56)  # Specify font and size\r\n+    company_color = (111, 111, 111)  # grey color\r\n+    company_position = (550, 370)  # Position for company text\r\n+    draw.text(company_position, company_text, fill=company_color, font=company_font)\r\n+\r\n+    # Save the generated badge image\r\n+    image_file = 'badge.png'\r\n+    background.save(image_file)\r\n+    \r\n+    return image_file\r\n+\r\n+# Function to send the generated image to the printer\r\n+def sendToPrint(image_file):\r\n+    # Define the print command using subprocess\r\n+    command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n+    \r\n+    try:\r\n+        # Execute the print command\r\n+        # subprocess.run(command, shell=True, check=True)\r\n+        return \"Print command executed successfully.\"\r\n+    except subprocess.CalledProcessError as e:\r\n+        return f\"Error: Failed to execute print command. {e}\"\r\n+\r\n+# Route for the form page\r\n+@app.route('/')\r\n+def index():\r\n+    response = app.response_class()\r\n+    response.headers.set(\"ngrok-skip-browser-warning\", \"true\")\r\n+    return render_template('form.html'), 200, response.headers\r\n+\r\n+# Route to handle form submission and print the badge\r\n+@app.route('/submit', methods=['POST'])\r\n+def submit():\r\n+    if request.method == 'POST':\r\n+        # Retrieve data from the form\r\n+        fname = request.form['fname']\r\n+        lname = request.form['lname']\r\n+        company = request.form['company']\r\n+        contact = request.form['contact']\r\n+\r\n+        # Save data to CSV\r\n+        with open('data.csv', mode='a', newline='') as file:\r\n+            writer = csv.writer(file)\r\n+            writer.writerow([fname, lname, company, contact, 0])\r\n+\r\n+        # Generate the badge image\r\n+        image_file = getBadge(fname, lname, company)\r\n+\r\n+        # If badge generation was successful, send it to print\r\n+        if image_file:\r\n+            print_status = sendToPrint(image_file)\r\n+            print(f\"{fname} {lname} {company} {contact}\")\r\n+            print(\"YES!!!!!!!!!!!!!!!!=========>\")\r\n+        else:\r\n+            print_status = \"Error: Badge generation failed.\"\r\n+\r\n+        return redirect('/')\r\n+\r\n+if __name__ == '__main__':\r\n+    app.run(debug=True)\r\n"
                },
                {
                    "date": 1729792626886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,101 +95,4 @@\n         return redirect('/')\r\n \r\n if __name__ == '__main__':\r\n     app.run(debug=True)\r\n-from flask import Flask, render_template, request, redirect\r\n-import csv\r\n-from PIL import Image, ImageDraw, ImageFont\r\n-from datetime import datetime\r\n-import subprocess\r\n-\r\n-app = Flask(__name__)\r\n-\r\n-# Function to generate badge with user data\r\n-def getBadge(fname, lname, cname):\r\n-    # Create a new image with a white background\r\n-    height = 696\r\n-    width = 1109\r\n-    background_color = (255, 255, 255)  # white color\r\n-    background = Image.new('RGB', (width, height), background_color)\r\n-\r\n-    # Open and resize the logo image to overlay as background\r\n-    try:\r\n-        background_image = Image.open('./siros-logo.png')  # Logo should be in the project folder\r\n-        background_image = background_image.resize((400, 400))\r\n-    except IOError:\r\n-        return \"Error: Logo file not found!\"\r\n-\r\n-    # Paste the logo onto the new image\r\n-    background.paste(background_image, (50, 100))\r\n-\r\n-    # Add text (first name, last name, company) to the image\r\n-    draw = ImageDraw.Draw(background)\r\n-    \r\n-    # Add name\r\n-    name_text = f\"{fname}\\n{lname}\"\r\n-    name_font = ImageFont.truetype(\"arial.ttf\", 96)  # Specify font and size\r\n-    name_color = (0, 0, 0)  # black color\r\n-    name_position = (550, 150)  # Position for name text\r\n-    draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n-    \r\n-    # Add company name\r\n-    company_text = f\"{cname}\"\r\n-    company_font = ImageFont.truetype(\"arial.ttf\", 56)  # Specify font and size\r\n-    company_color = (111, 111, 111)  # grey color\r\n-    company_position = (550, 370)  # Position for company text\r\n-    draw.text(company_position, company_text, fill=company_color, font=company_font)\r\n-\r\n-    # Save the generated badge image\r\n-    image_file = 'badge.png'\r\n-    background.save(image_file)\r\n-    \r\n-    return image_file\r\n-\r\n-# Function to send the generated image to the printer\r\n-def sendToPrint(image_file):\r\n-    # Define the print command using subprocess\r\n-    command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n-    \r\n-    try:\r\n-        # Execute the print command\r\n-        # subprocess.run(command, shell=True, check=True)\r\n-        return \"Print command executed successfully.\"\r\n-    except subprocess.CalledProcessError as e:\r\n-        return f\"Error: Failed to execute print command. {e}\"\r\n-\r\n-# Route for the form page\r\n-@app.route('/')\r\n-def index():\r\n-    response = app.response_class()\r\n-    response.headers.set(\"ngrok-skip-browser-warning\", \"true\")\r\n-    return render_template('form.html'), 200, response.headers\r\n-\r\n-# Route to handle form submission and print the badge\r\n-@app.route('/submit', methods=['POST'])\r\n-def submit():\r\n-    if request.method == 'POST':\r\n-        # Retrieve data from the form\r\n-        fname = request.form['fname']\r\n-        lname = request.form['lname']\r\n-        company = request.form['company']\r\n-        contact = request.form['contact']\r\n-\r\n-        # Save data to CSV\r\n-        with open('data.csv', mode='a', newline='') as file:\r\n-            writer = csv.writer(file)\r\n-            writer.writerow([fname, lname, company, contact, 0])\r\n-\r\n-        # Generate the badge image\r\n-        image_file = getBadge(fname, lname, company)\r\n-\r\n-        # If badge generation was successful, send it to print\r\n-        if image_file:\r\n-            # print_status = sendToPrint(image_file)\r\n-            print(\"YES!!!!!!!!!!!!!!!!=========>\")\r\n-        else:\r\n-            print_status = \"Error: Badge generation failed.\"\r\n-\r\n-        return redirect('/')\r\n-\r\n-if __name__ == '__main__':\r\n-    app.run(debug=True)\r\n"
                },
                {
                    "date": 1729792641871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n         image_file = getBadge(fname, lname, company)\r\n \r\n         # If badge generation was successful, send it to print\r\n         if image_file:\r\n-            print_status = sendToPrint(image_file)\r\n+            print_status = sendToPrint(\"./badge.png\")\r\n             print(f\"{fname} {lname} {company} {contact}\")\r\n             print(\"YES!!!!!!!!!!!!!!!!=========>\")\r\n         else:\r\n             print_status = \"Error: Badge generation failed.\"\r\n"
                },
                {
                    "date": 1729792728209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n     command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n     \r\n     try:\r\n         # Execute the print command\r\n-        # subprocess.run(command, shell=True, check=True)\r\n+        subprocess.run(command, shell=True, check=True)\r\n         return \"Print command executed successfully.\"\r\n     except subprocess.CalledProcessError as e:\r\n         return f\"Error: Failed to execute print command. {e}\"\r\n \r\n"
                },
                {
                    "date": 1729793474557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     background = Image.new('RGB', (width, height), background_color)\r\n \r\n     # Open and resize the logo image to overlay as background\r\n     try:\r\n-        background_image = Image.open('./siros-logo.png')  # Logo should be in the project folder\r\n+        background_image = Image.open('./t1.png')  # Logo should be in the project folder\r\n         background_image = background_image.resize((400, 400))\r\n     except IOError:\r\n         return \"Error: Logo file not found!\"\r\n \r\n"
                },
                {
                    "date": 1729793529556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,14 +16,14 @@\n \r\n     # Open and resize the logo image to overlay as background\r\n     try:\r\n         background_image = Image.open('./t1.png')  # Logo should be in the project folder\r\n-        background_image = background_image.resize((400, 400))\r\n+        # background_image = background_image.resize((400, 400))\r\n     except IOError:\r\n         return \"Error: Logo file not found!\"\r\n \r\n     # Paste the logo onto the new image\r\n-    background.paste(background_image, (50, 100))\r\n+    # background.paste(background_image, (50, 100))\r\n \r\n     # Add text (first name, last name, company) to the image\r\n     draw = ImageDraw.Draw(background)\r\n     \r\n"
                },
                {
                    "date": 1729793566516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     except IOError:\r\n         return \"Error: Logo file not found!\"\r\n \r\n     # Paste the logo onto the new image\r\n-    # background.paste(background_image, (50, 100))\r\n+    background.paste(background_image, (width, height))\r\n \r\n     # Add text (first name, last name, company) to the image\r\n     draw = ImageDraw.Draw(background)\r\n     \r\n"
                },
                {
                    "date": 1729793587884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n     command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n     \r\n     try:\r\n         # Execute the print command\r\n-        subprocess.run(command, shell=True, check=True)\r\n+        # subprocess.run(command, shell=True, check=True)\r\n         return \"Print command executed successfully.\"\r\n     except subprocess.CalledProcessError as e:\r\n         return f\"Error: Failed to execute print command. {e}\"\r\n \r\n"
                },
                {
                    "date": 1729793600629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \r\n     # Open and resize the logo image to overlay as background\r\n     try:\r\n         background_image = Image.open('./t1.png')  # Logo should be in the project folder\r\n-        # background_image = background_image.resize((400, 400))\r\n+        background_image = background_image.resize((width, height))\r\n     except IOError:\r\n         return \"Error: Logo file not found!\"\r\n \r\n     # Paste the logo onto the new image\r\n"
                },
                {
                    "date": 1729793622389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,14 +16,14 @@\n \r\n     # Open and resize the logo image to overlay as background\r\n     try:\r\n         background_image = Image.open('./t1.png')  # Logo should be in the project folder\r\n-        background_image = background_image.resize((width, height))\r\n+        # background_image = background_image.resize((400, 400))\r\n     except IOError:\r\n         return \"Error: Logo file not found!\"\r\n \r\n     # Paste the logo onto the new image\r\n-    background.paste(background_image, (width, height))\r\n+    background.paste(background_image, (50, 100))\r\n \r\n     # Add text (first name, last name, company) to the image\r\n     draw = ImageDraw.Draw(background)\r\n     \r\n@@ -53,9 +53,9 @@\n     command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n     \r\n     try:\r\n         # Execute the print command\r\n-        # subprocess.run(command, shell=True, check=True)\r\n+        subprocess.run(command, shell=True, check=True)\r\n         return \"Print command executed successfully.\"\r\n     except subprocess.CalledProcessError as e:\r\n         return f\"Error: Failed to execute print command. {e}\"\r\n \r\n"
                },
                {
                    "date": 1729793658146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n     command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n     \r\n     try:\r\n         # Execute the print command\r\n-        subprocess.run(command, shell=True, check=True)\r\n+        # subprocess.run(command, shell=True, check=True)\r\n         return \"Print command executed successfully.\"\r\n     except subprocess.CalledProcessError as e:\r\n         return f\"Error: Failed to execute print command. {e}\"\r\n \r\n"
                },
                {
                    "date": 1729793710181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n     command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n     \r\n     try:\r\n         # Execute the print command\r\n-        # subprocess.run(command, shell=True, check=True)\r\n+        subprocess.run(command, shell=True, check=True)\r\n         return \"Print command executed successfully.\"\r\n     except subprocess.CalledProcessError as e:\r\n         return f\"Error: Failed to execute print command. {e}\"\r\n \r\n"
                },
                {
                    "date": 1729793818633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     background = Image.new('RGB', (width, height), background_color)\r\n \r\n     # Open and resize the logo image to overlay as background\r\n     try:\r\n-        background_image = Image.open('./t1.png')  # Logo should be in the project folder\r\n+        background_image = Image.open('./t2.png')  # Logo should be in the project folder\r\n         # background_image = background_image.resize((400, 400))\r\n     except IOError:\r\n         return \"Error: Logo file not found!\"\r\n \r\n"
                },
                {
                    "date": 1729793863815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n     company_font = ImageFont.truetype(\"arial.ttf\", 56)  # Specify font and size\r\n     company_color = (111, 111, 111)  # grey color\r\n-    company_position = (550, 370)  # Position for company text\r\n+    company_position = (450, 370)  # Position for company text\r\n     draw.text(company_position, company_text, fill=company_color, font=company_font)\r\n \r\n     # Save the generated badge image\r\n     image_file = 'badge.png'\r\n@@ -53,9 +53,9 @@\n     command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n     \r\n     try:\r\n         # Execute the print command\r\n-        subprocess.run(command, shell=True, check=True)\r\n+        # subprocess.run(command, shell=True, check=True)\r\n         return \"Print command executed successfully.\"\r\n     except subprocess.CalledProcessError as e:\r\n         return f\"Error: Failed to execute print command. {e}\"\r\n \r\n"
                },
                {
                    "date": 1729793898395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,16 +30,16 @@\n     # Add name\r\n     name_text = f\"{fname}\\n{lname}\"\r\n     name_font = ImageFont.truetype(\"arial.ttf\", 96)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n-    name_position = (550, 150)  # Position for name text\r\n+    name_position = (400, 100)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n     company_font = ImageFont.truetype(\"arial.ttf\", 56)  # Specify font and size\r\n     company_color = (111, 111, 111)  # grey color\r\n-    company_position = (450, 370)  # Position for company text\r\n+    company_position = (400, 370)  # Position for company text\r\n     draw.text(company_position, company_text, fill=company_color, font=company_font)\r\n \r\n     # Save the generated badge image\r\n     image_file = 'badge.png'\r\n"
                },
                {
                    "date": 1729793952467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,23 +21,23 @@\n     except IOError:\r\n         return \"Error: Logo file not found!\"\r\n \r\n     # Paste the logo onto the new image\r\n-    background.paste(background_image, (50, 100))\r\n+    background.paste(background_image, (0, 0))\r\n \r\n     # Add text (first name, last name, company) to the image\r\n     draw = ImageDraw.Draw(background)\r\n     \r\n     # Add name\r\n     name_text = f\"{fname}\\n{lname}\"\r\n-    name_font = ImageFont.truetype(\"arial.ttf\", 96)  # Specify font and size\r\n+    name_font = ImageFont.truetype(\"arial.ttf\", 76)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n     name_position = (400, 100)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n-    company_font = ImageFont.truetype(\"arial.ttf\", 56)  # Specify font and size\r\n+    company_font = ImageFont.truetype(\"arial.ttf\", 46)  # Specify font and size\r\n     company_color = (111, 111, 111)  # grey color\r\n     company_position = (400, 370)  # Position for company text\r\n     draw.text(company_position, company_text, fill=company_color, font=company_font)\r\n \r\n"
                },
                {
                    "date": 1729793982213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,10 @@\n \r\n     # Add text (first name, last name, company) to the image\r\n     draw = ImageDraw.Draw(background)\r\n     \r\n+    left_margin = 350\r\n+    \r\n     # Add name\r\n     name_text = f\"{fname}\\n{lname}\"\r\n     name_font = ImageFont.truetype(\"arial.ttf\", 76)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n"
                },
                {
                    "date": 1729793999107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,16 +32,16 @@\n     # Add name\r\n     name_text = f\"{fname}\\n{lname}\"\r\n     name_font = ImageFont.truetype(\"arial.ttf\", 76)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n-    name_position = (400, 100)  # Position for name text\r\n+    name_position = (left_margin, 50)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n     company_font = ImageFont.truetype(\"arial.ttf\", 46)  # Specify font and size\r\n     company_color = (111, 111, 111)  # grey color\r\n-    company_position = (400, 370)  # Position for company text\r\n+    company_position = (left_margin, 370)  # Position for company text\r\n     draw.text(company_position, company_text, fill=company_color, font=company_font)\r\n \r\n     # Save the generated badge image\r\n     image_file = 'badge.png'\r\n"
                },
                {
                    "date": 1729794022960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n \r\n     # Add text (first name, last name, company) to the image\r\n     draw = ImageDraw.Draw(background)\r\n     \r\n-    left_margin = 350\r\n+    left_margin = 310\r\n     \r\n     # Add name\r\n     name_text = f\"{fname}\\n{lname}\"\r\n     name_font = ImageFont.truetype(\"arial.ttf\", 76)  # Specify font and size\r\n"
                },
                {
                    "date": 1729794031066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     # Add name\r\n     name_text = f\"{fname}\\n{lname}\"\r\n     name_font = ImageFont.truetype(\"arial.ttf\", 76)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n-    name_position = (left_margin, 50)  # Position for name text\r\n+    name_position = (left_margin, 30)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n"
                },
                {
                    "date": 1729794041243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,18 +30,18 @@\n     left_margin = 310\r\n     \r\n     # Add name\r\n     name_text = f\"{fname}\\n{lname}\"\r\n-    name_font = ImageFont.truetype(\"arial.ttf\", 76)  # Specify font and size\r\n+    name_font = ImageFont.truetype(\"arial.ttf\", 66)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n     name_position = (left_margin, 30)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n     company_font = ImageFont.truetype(\"arial.ttf\", 46)  # Specify font and size\r\n     company_color = (111, 111, 111)  # grey color\r\n-    company_position = (left_margin, 370)  # Position for company text\r\n+    company_position = (left_margin, 270)  # Position for company text\r\n     draw.text(company_position, company_text, fill=company_color, font=company_font)\r\n \r\n     # Save the generated badge image\r\n     image_file = 'badge.png'\r\n"
                },
                {
                    "date": 1729794062132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n-    company_font = ImageFont.truetype(\"arial.ttf\", 46)  # Specify font and size\r\n+    company_font = ImageFont.truetype(\"arial.ttf\", 36)  # Specify font and size\r\n     company_color = (111, 111, 111)  # grey color\r\n     company_position = (left_margin, 270)  # Position for company text\r\n     draw.text(company_position, company_text, fill=company_color, font=company_font)\r\n \r\n"
                },
                {
                    "date": 1729794201665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     background = Image.new('RGB', (width, height), background_color)\r\n \r\n     # Open and resize the logo image to overlay as background\r\n     try:\r\n-        background_image = Image.open('./t2.png')  # Logo should be in the project folder\r\n+        background_image = Image.open('./t3.bmp')  # Logo should be in the project folder\r\n         # background_image = background_image.resize((400, 400))\r\n     except IOError:\r\n         return \"Error: Logo file not found!\"\r\n \r\n@@ -55,9 +55,9 @@\n     command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n     \r\n     try:\r\n         # Execute the print command\r\n-        # subprocess.run(command, shell=True, check=True)\r\n+        subprocess.run(command, shell=True, check=True)\r\n         return \"Print command executed successfully.\"\r\n     except subprocess.CalledProcessError as e:\r\n         return f\"Error: Failed to execute print command. {e}\"\r\n \r\n"
                },
                {
                    "date": 1729794216435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n     command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n     \r\n     try:\r\n         # Execute the print command\r\n-        subprocess.run(command, shell=True, check=True)\r\n+        # subprocess.run(command, shell=True, check=True)\r\n         return \"Print command executed successfully.\"\r\n     except subprocess.CalledProcessError as e:\r\n         return f\"Error: Failed to execute print command. {e}\"\r\n \r\n"
                },
                {
                    "date": 1729794228001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n     command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n     \r\n     try:\r\n         # Execute the print command\r\n-        # subprocess.run(command, shell=True, check=True)\r\n+        subprocess.run(command, shell=True, check=True)\r\n         return \"Print command executed successfully.\"\r\n     except subprocess.CalledProcessError as e:\r\n         return f\"Error: Failed to execute print command. {e}\"\r\n \r\n"
                },
                {
                    "date": 1729794452717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,100 @@\n+from flask import Flask, render_template, request, redirect\r\n+import csv\r\n+from PIL import Image, ImageDraw, ImageFont\r\n+from datetime import datetime\r\n+import subprocess\r\n+\r\n+app = Flask(__name__)\r\n+\r\n+# Function to generate badge with user data\r\n+def getBadge(fname, lname, cname):\r\n+    # Create a new image with a white background\r\n+    height = 696\r\n+    width = 1109\r\n+    background_color = (255, 255, 255)  # white color\r\n+    background = Image.new('RGB', (width, height), background_color)\r\n+\r\n+    # Open and resize the logo image to overlay as background\r\n+    try:\r\n+        background_image = Image.open('./t3.bmp')  # Logo should be in the project folder\r\n+        # background_image = background_image.resize((400, 400))\r\n+    except IOError:\r\n+        return \"Error: Logo file not found!\"\r\n+\r\n+    # Paste the logo onto the new image\r\n+    background.paste(background_image, (0, 0))\r\n+\r\n+    # Add text (first name, last name, company) to the image\r\n+    draw = ImageDraw.Draw(background)\r\n+    \r\n+    left_margin = 410\r\n+    \r\n+    # Add name\r\n+    name_text = f\"{fname}\\n{lname}\"\r\n+    name_font = ImageFont.truetype(\"arial.ttf\", 66)  # Specify font and size\r\n+    name_color = (0, 0, 0)  # black color\r\n+    name_position = (left_margin, 30)  # Position for name text\r\n+    draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n+    \r\n+    # Add company name\r\n+    company_text = f\"{cname}\"\r\n+    company_font = ImageFont.truetype(\"arial.ttf\", 36)  # Specify font and size\r\n+    company_color = (111, 111, 111)  # grey color\r\n+    company_position = (left_margin, 270)  # Position for company text\r\n+    draw.text(company_position, company_text, fill=company_color, font=company_font)\r\n+\r\n+    # Save the generated badge image\r\n+    image_file = 'badge.png'\r\n+    background.save(image_file)\r\n+    \r\n+    return image_file\r\n+\r\n+# Function to send the generated image to the printer\r\n+def sendToPrint(image_file):\r\n+    # Define the print command using subprocess\r\n+    command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n+    \r\n+    try:\r\n+        # Execute the print command\r\n+        subprocess.run(command, shell=True, check=True)\r\n+        return \"Print command executed successfully.\"\r\n+    except subprocess.CalledProcessError as e:\r\n+        return f\"Error: Failed to execute print command. {e}\"\r\n+\r\n+# Route for the form page\r\n+@app.route('/')\r\n+def index():\r\n+    response = app.response_class()\r\n+    response.headers.set(\"ngrok-skip-browser-warning\", \"true\")\r\n+    return render_template('form.html'), 200, response.headers\r\n+\r\n+# Route to handle form submission and print the badge\r\n+@app.route('/submit', methods=['POST'])\r\n+def submit():\r\n+    if request.method == 'POST':\r\n+        # Retrieve data from the form\r\n+        fname = request.form['fname']\r\n+        lname = request.form['lname']\r\n+        company = request.form['company']\r\n+        contact = request.form['contact']\r\n+\r\n+        # Save data to CSV\r\n+        with open('data.csv', mode='a', newline='') as file:\r\n+            writer = csv.writer(file)\r\n+            writer.writerow([fname, lname, company, contact, 0])\r\n+\r\n+        # Generate the badge image\r\n+        image_file = getBadge(fname, lname, company)\r\n+\r\n+        # If badge generation was successful, send it to print\r\n+        if image_file:\r\n+            print_status = sendToPrint(\"./badge.png\")\r\n+            print(f\"{fname} {lname} {company} {contact}\")\r\n+            print(\"YES!!!!!!!!!!!!!!!!=========>\")\r\n+        else:\r\n+            print_status = \"Error: Badge generation failed.\"\r\n+\r\n+        return redirect('/')\r\n+\r\n+if __name__ == '__main__':\r\n+    app.run(debug=True)\r\n"
                },
                {
                    "date": 1729794467152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     # Add name\r\n     name_text = f\"{fname}\\n{lname}\"\r\n     name_font = ImageFont.truetype(\"arial.ttf\", 66)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n-    name_position = (left_margin, 30)  # Position for name text\r\n+    name_position = (left_margin, 50)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n@@ -97,104 +97,4 @@\n         return redirect('/')\r\n \r\n if __name__ == '__main__':\r\n     app.run(debug=True)\r\n-from flask import Flask, render_template, request, redirect\r\n-import csv\r\n-from PIL import Image, ImageDraw, ImageFont\r\n-from datetime import datetime\r\n-import subprocess\r\n-\r\n-app = Flask(__name__)\r\n-\r\n-# Function to generate badge with user data\r\n-def getBadge(fname, lname, cname):\r\n-    # Create a new image with a white background\r\n-    height = 696\r\n-    width = 1109\r\n-    background_color = (255, 255, 255)  # white color\r\n-    background = Image.new('RGB', (width, height), background_color)\r\n-\r\n-    # Open and resize the logo image to overlay as background\r\n-    try:\r\n-        background_image = Image.open('./t3.bmp')  # Logo should be in the project folder\r\n-        # background_image = background_image.resize((400, 400))\r\n-    except IOError:\r\n-        return \"Error: Logo file not found!\"\r\n-\r\n-    # Paste the logo onto the new image\r\n-    background.paste(background_image, (0, 0))\r\n-\r\n-    # Add text (first name, last name, company) to the image\r\n-    draw = ImageDraw.Draw(background)\r\n-    \r\n-    left_margin = 310\r\n-    \r\n-    # Add name\r\n-    name_text = f\"{fname}\\n{lname}\"\r\n-    name_font = ImageFont.truetype(\"arial.ttf\", 66)  # Specify font and size\r\n-    name_color = (0, 0, 0)  # black color\r\n-    name_position = (left_margin, 30)  # Position for name text\r\n-    draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n-    \r\n-    # Add company name\r\n-    company_text = f\"{cname}\"\r\n-    company_font = ImageFont.truetype(\"arial.ttf\", 36)  # Specify font and size\r\n-    company_color = (111, 111, 111)  # grey color\r\n-    company_position = (left_margin, 270)  # Position for company text\r\n-    draw.text(company_position, company_text, fill=company_color, font=company_font)\r\n-\r\n-    # Save the generated badge image\r\n-    image_file = 'badge.png'\r\n-    background.save(image_file)\r\n-    \r\n-    return image_file\r\n-\r\n-# Function to send the generated image to the printer\r\n-def sendToPrint(image_file):\r\n-    # Define the print command using subprocess\r\n-    command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n-    \r\n-    try:\r\n-        # Execute the print command\r\n-        subprocess.run(command, shell=True, check=True)\r\n-        return \"Print command executed successfully.\"\r\n-    except subprocess.CalledProcessError as e:\r\n-        return f\"Error: Failed to execute print command. {e}\"\r\n-\r\n-# Route for the form page\r\n-@app.route('/')\r\n-def index():\r\n-    response = app.response_class()\r\n-    response.headers.set(\"ngrok-skip-browser-warning\", \"true\")\r\n-    return render_template('form.html'), 200, response.headers\r\n-\r\n-# Route to handle form submission and print the badge\r\n-@app.route('/submit', methods=['POST'])\r\n-def submit():\r\n-    if request.method == 'POST':\r\n-        # Retrieve data from the form\r\n-        fname = request.form['fname']\r\n-        lname = request.form['lname']\r\n-        company = request.form['company']\r\n-        contact = request.form['contact']\r\n-\r\n-        # Save data to CSV\r\n-        with open('data.csv', mode='a', newline='') as file:\r\n-            writer = csv.writer(file)\r\n-            writer.writerow([fname, lname, company, contact, 0])\r\n-\r\n-        # Generate the badge image\r\n-        image_file = getBadge(fname, lname, company)\r\n-\r\n-        # If badge generation was successful, send it to print\r\n-        if image_file:\r\n-            print_status = sendToPrint(\"./badge.png\")\r\n-            print(f\"{fname} {lname} {company} {contact}\")\r\n-            print(\"YES!!!!!!!!!!!!!!!!=========>\")\r\n-        else:\r\n-            print_status = \"Error: Badge generation failed.\"\r\n-\r\n-        return redirect('/')\r\n-\r\n-if __name__ == '__main__':\r\n-    app.run(debug=True)\r\n"
                },
                {
                    "date": 1729794479039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n     company_font = ImageFont.truetype(\"arial.ttf\", 36)  # Specify font and size\r\n     company_color = (111, 111, 111)  # grey color\r\n-    company_position = (left_margin, 270)  # Position for company text\r\n+    company_position = (left_margin, 370)  # Position for company text\r\n     draw.text(company_position, company_text, fill=company_color, font=company_font)\r\n \r\n     # Save the generated badge image\r\n     image_file = 'badge.png'\r\n"
                },
                {
                    "date": 1729794506507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,15 +26,15 @@\n \r\n     # Add text (first name, last name, company) to the image\r\n     draw = ImageDraw.Draw(background)\r\n     \r\n-    left_margin = 410\r\n+    left_margin = 450\r\n     \r\n     # Add name\r\n     name_text = f\"{fname}\\n{lname}\"\r\n     name_font = ImageFont.truetype(\"arial.ttf\", 66)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n-    name_position = (left_margin, 50)  # Position for name text\r\n+    name_position = (left_margin, 60)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n@@ -55,9 +55,9 @@\n     command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n     \r\n     try:\r\n         # Execute the print command\r\n-        subprocess.run(command, shell=True, check=True)\r\n+        # subprocess.run(command, shell=True, check=True)\r\n         return \"Print command executed successfully.\"\r\n     except subprocess.CalledProcessError as e:\r\n         return f\"Error: Failed to execute print command. {e}\"\r\n \r\n"
                },
                {
                    "date": 1729794523393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n     company_font = ImageFont.truetype(\"arial.ttf\", 36)  # Specify font and size\r\n     company_color = (111, 111, 111)  # grey color\r\n-    company_position = (left_margin, 370)  # Position for company text\r\n+    company_position = (left_margin+30, 490)  # Position for company text\r\n     draw.text(company_position, company_text, fill=company_color, font=company_font)\r\n \r\n     # Save the generated badge image\r\n     image_file = 'badge.png'\r\n"
                },
                {
                    "date": 1729794548531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,16 +32,16 @@\n     # Add name\r\n     name_text = f\"{fname}\\n{lname}\"\r\n     name_font = ImageFont.truetype(\"arial.ttf\", 66)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n-    name_position = (left_margin, 60)  # Position for name text\r\n+    name_position = (left_margin, 80)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n     company_font = ImageFont.truetype(\"arial.ttf\", 36)  # Specify font and size\r\n     company_color = (111, 111, 111)  # grey color\r\n-    company_position = (left_margin+30, 490)  # Position for company text\r\n+    company_position = (left_margin+90, 490)  # Position for company text\r\n     draw.text(company_position, company_text, fill=company_color, font=company_font)\r\n \r\n     # Save the generated badge image\r\n     image_file = 'badge.png'\r\n"
                },
                {
                    "date": 1729794576096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n     command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n     \r\n     try:\r\n         # Execute the print command\r\n-        # subprocess.run(command, shell=True, check=True)\r\n+        subprocess.run(command, shell=True, check=True)\r\n         return \"Print command executed successfully.\"\r\n     except subprocess.CalledProcessError as e:\r\n         return f\"Error: Failed to execute print command. {e}\"\r\n \r\n"
                },
                {
                    "date": 1729794694273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n     left_margin = 450\r\n     \r\n     # Add name\r\n     name_text = f\"{fname}\\n{lname}\"\r\n-    name_font = ImageFont.truetype(\"arial.ttf\", 66)  # Specify font and size\r\n+    name_font = ImageFont.truetype(\"arial.ttf\", 76)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n     name_position = (left_margin, 80)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n"
                },
                {
                    "date": 1729794712428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,15 +28,22 @@\n     draw = ImageDraw.Draw(background)\r\n     \r\n     left_margin = 450\r\n     \r\n-    # Add name\r\n-    name_text = f\"{fname}\\n{lname}\"\r\n+    # Add fname\r\n+    name_text = f\"{fname}\"\r\n     name_font = ImageFont.truetype(\"arial.ttf\", 76)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n     name_position = (left_margin, 80)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n+    # Add lname\r\n+    name_text = f\"{lname}\"\r\n+    name_font = ImageFont.truetype(\"arial.ttf\", 76)  # Specify font and size\r\n+    name_color = (0, 0, 0)  # black color\r\n+    name_position = (left_margin, 80)  # Position for name text\r\n+    draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n+    \r\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n     company_font = ImageFont.truetype(\"arial.ttf\", 36)  # Specify font and size\r\n     company_color = (111, 111, 111)  # grey color\r\n"
                },
                {
                    "date": 1729794719195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     # Add lname\r\n     name_text = f\"{lname}\"\r\n     name_font = ImageFont.truetype(\"arial.ttf\", 76)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n-    name_position = (left_margin, 80)  # Position for name text\r\n+    name_position = (left_margin, 140)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n"
                },
                {
                    "date": 1729794733111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n-    company_font = ImageFont.truetype(\"arial.ttf\", 36)  # Specify font and size\r\n+    company_font = ImageFont.truetype(\"arial.ttf\", 46)  # Specify font and size\r\n     company_color = (111, 111, 111)  # grey color\r\n     company_position = (left_margin+90, 490)  # Position for company text\r\n     draw.text(company_position, company_text, fill=company_color, font=company_font)\r\n \r\n@@ -62,9 +62,9 @@\n     command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n     \r\n     try:\r\n         # Execute the print command\r\n-        subprocess.run(command, shell=True, check=True)\r\n+        # subprocess.run(command, shell=True, check=True)\r\n         return \"Print command executed successfully.\"\r\n     except subprocess.CalledProcessError as e:\r\n         return f\"Error: Failed to execute print command. {e}\"\r\n \r\n"
                },
                {
                    "date": 1729794745062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     # Add lname\r\n     name_text = f\"{lname}\"\r\n     name_font = ImageFont.truetype(\"arial.ttf\", 76)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n-    name_position = (left_margin, 140)  # Position for name text\r\n+    name_position = (left_margin, 180)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n"
                },
                {
                    "date": 1729794776210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     # Add lname\r\n     name_text = f\"{lname}\"\r\n     name_font = ImageFont.truetype(\"arial.ttf\", 76)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n-    name_position = (left_margin, 180)  # Position for name text\r\n+    name_position = (left_margin, 200)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n"
                },
                {
                    "date": 1729794935938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,23 +30,23 @@\n     left_margin = 450\r\n     \r\n     # Add fname\r\n     name_text = f\"{fname}\"\r\n-    name_font = ImageFont.truetype(\"arial.ttf\", 76)  # Specify font and size\r\n+    name_font = ImageFont.truetype(\"roboto.ttf\", 76)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n     name_position = (left_margin, 80)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add lname\r\n     name_text = f\"{lname}\"\r\n-    name_font = ImageFont.truetype(\"arial.ttf\", 76)  # Specify font and size\r\n+    name_font = ImageFont.truetype(\"roboto.ttf\", 76)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n     name_position = (left_margin, 200)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n-    company_font = ImageFont.truetype(\"arial.ttf\", 46)  # Specify font and size\r\n+    company_font = ImageFont.truetype(\"roboto.ttf\", 46)  # Specify font and size\r\n     company_color = (111, 111, 111)  # grey color\r\n     company_position = (left_margin+90, 490)  # Position for company text\r\n     draw.text(company_position, company_text, fill=company_color, font=company_font)\r\n \r\n"
                },
                {
                    "date": 1729794977330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,16 +32,16 @@\n     # Add fname\r\n     name_text = f\"{fname}\"\r\n     name_font = ImageFont.truetype(\"roboto.ttf\", 76)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n-    name_position = (left_margin, 80)  # Position for name text\r\n+    name_position = (left_margin, 90)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add lname\r\n     name_text = f\"{lname}\"\r\n     name_font = ImageFont.truetype(\"roboto.ttf\", 76)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n-    name_position = (left_margin, 200)  # Position for name text\r\n+    name_position = (left_margin, 190)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n"
                },
                {
                    "date": 1729794996847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n     command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n     \r\n     try:\r\n         # Execute the print command\r\n-        # subprocess.run(command, shell=True, check=True)\r\n+        subprocess.run(command, shell=True, check=True)\r\n         return \"Print command executed successfully.\"\r\n     except subprocess.CalledProcessError as e:\r\n         return f\"Error: Failed to execute print command. {e}\"\r\n \r\n"
                },
                {
                    "date": 1729795067424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,16 +32,16 @@\n     # Add fname\r\n     name_text = f\"{fname}\"\r\n     name_font = ImageFont.truetype(\"roboto.ttf\", 76)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n-    name_position = (left_margin, 90)  # Position for name text\r\n+    name_position = (left_margin-30, 90)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add lname\r\n     name_text = f\"{lname}\"\r\n     name_font = ImageFont.truetype(\"roboto.ttf\", 76)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n-    name_position = (left_margin, 190)  # Position for name text\r\n+    name_position = (left_margin-30, 190)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n"
                },
                {
                    "date": 1729795073064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,16 +30,16 @@\n     left_margin = 450\r\n     \r\n     # Add fname\r\n     name_text = f\"{fname}\"\r\n-    name_font = ImageFont.truetype(\"roboto.ttf\", 76)  # Specify font and size\r\n+    name_font = ImageFont.truetype(\"roboto.ttf\", 86)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n     name_position = (left_margin-30, 90)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add lname\r\n     name_text = f\"{lname}\"\r\n-    name_font = ImageFont.truetype(\"roboto.ttf\", 76)  # Specify font and size\r\n+    name_font = ImageFont.truetype(\"roboto.ttf\", 86)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n     name_position = (left_margin-30, 190)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n"
                },
                {
                    "date": 1729795082856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n-    company_font = ImageFont.truetype(\"roboto.ttf\", 46)  # Specify font and size\r\n+    company_font = ImageFont.truetype(\"roboto.ttf\", 56)  # Specify font and size\r\n     company_color = (111, 111, 111)  # grey color\r\n     company_position = (left_margin+90, 490)  # Position for company text\r\n     draw.text(company_position, company_text, fill=company_color, font=company_font)\r\n \r\n"
                },
                {
                    "date": 1729795090363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n     command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n     \r\n     try:\r\n         # Execute the print command\r\n-        subprocess.run(command, shell=True, check=True)\r\n+        # subprocess.run(command, shell=True, check=True)\r\n         return \"Print command executed successfully.\"\r\n     except subprocess.CalledProcessError as e:\r\n         return f\"Error: Failed to execute print command. {e}\"\r\n \r\n"
                },
                {
                    "date": 1729795171159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,18 +30,18 @@\n     left_margin = 450\r\n     \r\n     # Add fname\r\n     name_text = f\"{fname}\"\r\n-    name_font = ImageFont.truetype(\"roboto.ttf\", 86)  # Specify font and size\r\n+    name_font = ImageFont.truetype(\"roboto.ttf\", 96)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n-    name_position = (left_margin-30, 90)  # Position for name text\r\n+    name_position = (left_margin-30, 80)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add lname\r\n     name_text = f\"{lname}\"\r\n-    name_font = ImageFont.truetype(\"roboto.ttf\", 86)  # Specify font and size\r\n+    name_font = ImageFont.truetype(\"roboto.ttf\", 96)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n-    name_position = (left_margin-30, 190)  # Position for name text\r\n+    name_position = (left_margin-30, 200)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n"
                },
                {
                    "date": 1729795189345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     # Add fname\r\n     name_text = f\"{fname}\"\r\n     name_font = ImageFont.truetype(\"roboto.ttf\", 96)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n-    name_position = (left_margin-30, 80)  # Position for name text\r\n+    name_position = (left_margin-30, 70)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add lname\r\n     name_text = f\"{lname}\"\r\n"
                },
                {
                    "date": 1729795197289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,16 +32,16 @@\n     # Add fname\r\n     name_text = f\"{fname}\"\r\n     name_font = ImageFont.truetype(\"roboto.ttf\", 96)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n-    name_position = (left_margin-30, 70)  # Position for name text\r\n+    name_position = (left_margin-50, 70)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add lname\r\n     name_text = f\"{lname}\"\r\n     name_font = ImageFont.truetype(\"roboto.ttf\", 96)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n-    name_position = (left_margin-30, 200)  # Position for name text\r\n+    name_position = (left_margin-50, 200)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n"
                },
                {
                    "date": 1729795219018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,16 +32,16 @@\n     # Add fname\r\n     name_text = f\"{fname}\"\r\n     name_font = ImageFont.truetype(\"roboto.ttf\", 96)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n-    name_position = (left_margin-50, 70)  # Position for name text\r\n+    name_position = (left_margin-60, 70)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add lname\r\n     name_text = f\"{lname}\"\r\n     name_font = ImageFont.truetype(\"roboto.ttf\", 96)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n-    name_position = (left_margin-50, 200)  # Position for name text\r\n+    name_position = (left_margin-60, 200)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n"
                },
                {
                    "date": 1729795236076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,16 +32,16 @@\n     # Add fname\r\n     name_text = f\"{fname}\"\r\n     name_font = ImageFont.truetype(\"roboto.ttf\", 96)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n-    name_position = (left_margin-60, 70)  # Position for name text\r\n+    name_position = (left_margin-70, 70)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add lname\r\n     name_text = f\"{lname}\"\r\n     name_font = ImageFont.truetype(\"roboto.ttf\", 96)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n-    name_position = (left_margin-60, 200)  # Position for name text\r\n+    name_position = (left_margin-70, 200)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n"
                },
                {
                    "date": 1729795256372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n     command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n     \r\n     try:\r\n         # Execute the print command\r\n-        # subprocess.run(command, shell=True, check=True)\r\n+        subprocess.run(command, shell=True, check=True)\r\n         return \"Print command executed successfully.\"\r\n     except subprocess.CalledProcessError as e:\r\n         return f\"Error: Failed to execute print command. {e}\"\r\n \r\n"
                },
                {
                    "date": 1729795642253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,107 @@\n+from flask import Flask, render_template, request, redirect\r\n+import csv\r\n+from PIL import Image, ImageDraw, ImageFont\r\n+from datetime import datetime\r\n+import subprocess\r\n+\r\n+app = Flask(__name__)\r\n+\r\n+# Function to generate badge with user data\r\n+def getBadge(fname, lname, cname):\r\n+    # Create a new image with a white background\r\n+    height = 696\r\n+    width = 1109\r\n+    background_color = (255, 255, 255)  # white color\r\n+    background = Image.new('RGB', (width, height), background_color)\r\n+\r\n+    # Open and resize the logo image to overlay as background\r\n+    try:\r\n+        background_image = Image.open('./t3.bmp')  # Logo should be in the project folder\r\n+        # background_image = background_image.resize((400, 400))\r\n+    except IOError:\r\n+        return \"Error: Logo file not found!\"\r\n+\r\n+    # Paste the logo onto the new image\r\n+    background.paste(background_image, (0, 0))\r\n+\r\n+    # Add text (first name, last name, company) to the image\r\n+    draw = ImageDraw.Draw(background)\r\n+    \r\n+    left_margin = 450\r\n+    \r\n+    # Add fname\r\n+    name_text = f\"{fname}\"\r\n+    name_font = ImageFont.truetype(\"roboto.ttf\", 96)  # Specify font and size\r\n+    name_color = (0, 0, 0)  # black color\r\n+    name_position = (left_margin-70, 70)  # Position for name text\r\n+    draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n+    \r\n+    # Add lname\r\n+    name_text = f\"{lname}\"\r\n+    name_font = ImageFont.truetype(\"roboto.ttf\", 96)  # Specify font and size\r\n+    name_color = (0, 0, 0)  # black color\r\n+    name_position = (left_margin-70, 200)  # Position for name text\r\n+    draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n+    \r\n+    # Add company name\r\n+    company_text = f\"{cname}\"\r\n+    company_font = ImageFont.truetype(\"roboto.ttf\", 56)  # Specify font and size\r\n+    company_color = (111, 111, 111)  # grey color\r\n+    company_position = (left_margin+90, 490)  # Position for company text\r\n+    draw.text(company_position, company_text, fill=company_color, font=company_font)\r\n+\r\n+    # Save the generated badge image\r\n+    image_file = 'badge.png'\r\n+    background.save(image_file)\r\n+    \r\n+    return image_file\r\n+\r\n+# Function to send the generated image to the printer\r\n+def sendToPrint(image_file):\r\n+    # Define the print command using subprocess\r\n+    command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n+    \r\n+    try:\r\n+        # Execute the print command\r\n+        subprocess.run(command, shell=True, check=True)\r\n+        return \"Print command executed successfully.\"\r\n+    except subprocess.CalledProcessError as e:\r\n+        return f\"Error: Failed to execute print command. {e}\"\r\n+\r\n+# Route for the form page\r\n+@app.route('/')\r\n+def index():\r\n+    response = app.response_class()\r\n+    response.headers.set(\"ngrok-skip-browser-warning\", \"true\")\r\n+    return render_template('form.html'), 200, response.headers\r\n+\r\n+# Route to handle form submission and print the badge\r\n+@app.route('/submit', methods=['POST'])\r\n+def submit():\r\n+    if request.method == 'POST':\r\n+        # Retrieve data from the form\r\n+        fname = request.form['fname']\r\n+        lname = request.form['lname']\r\n+        company = request.form['company']\r\n+        contact = request.form['contact']\r\n+\r\n+        # Save data to CSV\r\n+        with open('data.csv', mode='a', newline='') as file:\r\n+            writer = csv.writer(file)\r\n+            writer.writerow([fname, lname, company, contact, 0])\r\n+\r\n+        # Generate the badge image\r\n+        image_file = getBadge(fname, lname, company)\r\n+\r\n+        # If badge generation was successful, send it to print\r\n+        if image_file:\r\n+            print_status = sendToPrint(\"./badge.png\")\r\n+            print(f\"{fname} {lname} {company} {contact}\")\r\n+            print(\"YES!!!!!!!!!!!!!!!!=========>\")\r\n+        else:\r\n+            print_status = \"Error: Badge generation failed.\"\r\n+\r\n+        return redirect('/')\r\n+\r\n+if __name__ == '__main__':\r\n+    app.run(debug=True)\r\n"
                },
                {
                    "date": 1729797604344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,13 @@\n from flask import Flask, render_template, request, redirect\r\n import csv\r\n from PIL import Image, ImageDraw, ImageFont\r\n from datetime import datetime\r\n+from flask_cors import CORS  # Import CORS\r\n import subprocess\r\n \r\n app = Flask(__name__)\r\n+CORS(app)\r\n \r\n # Function to generate badge with user data\r\n def getBadge(fname, lname, cname):\r\n     # Create a new image with a white background\r\n@@ -104,111 +106,4 @@\n         return redirect('/')\r\n \r\n if __name__ == '__main__':\r\n     app.run(debug=True)\r\n-from flask import Flask, render_template, request, redirect\r\n-import csv\r\n-from PIL import Image, ImageDraw, ImageFont\r\n-from datetime import datetime\r\n-import subprocess\r\n-\r\n-app = Flask(__name__)\r\n-\r\n-# Function to generate badge with user data\r\n-def getBadge(fname, lname, cname):\r\n-    # Create a new image with a white background\r\n-    height = 696\r\n-    width = 1109\r\n-    background_color = (255, 255, 255)  # white color\r\n-    background = Image.new('RGB', (width, height), background_color)\r\n-\r\n-    # Open and resize the logo image to overlay as background\r\n-    try:\r\n-        background_image = Image.open('./t3.bmp')  # Logo should be in the project folder\r\n-        # background_image = background_image.resize((400, 400))\r\n-    except IOError:\r\n-        return \"Error: Logo file not found!\"\r\n-\r\n-    # Paste the logo onto the new image\r\n-    background.paste(background_image, (0, 0))\r\n-\r\n-    # Add text (first name, last name, company) to the image\r\n-    draw = ImageDraw.Draw(background)\r\n-    \r\n-    left_margin = 450\r\n-    \r\n-    # Add fname\r\n-    name_text = f\"{fname}\"\r\n-    name_font = ImageFont.truetype(\"roboto.ttf\", 96)  # Specify font and size\r\n-    name_color = (0, 0, 0)  # black color\r\n-    name_position = (left_margin-70, 70)  # Position for name text\r\n-    draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n-    \r\n-    # Add lname\r\n-    name_text = f\"{lname}\"\r\n-    name_font = ImageFont.truetype(\"roboto.ttf\", 96)  # Specify font and size\r\n-    name_color = (0, 0, 0)  # black color\r\n-    name_position = (left_margin-70, 200)  # Position for name text\r\n-    draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n-    \r\n-    # Add company name\r\n-    company_text = f\"{cname}\"\r\n-    company_font = ImageFont.truetype(\"roboto.ttf\", 56)  # Specify font and size\r\n-    company_color = (111, 111, 111)  # grey color\r\n-    company_position = (left_margin+90, 490)  # Position for company text\r\n-    draw.text(company_position, company_text, fill=company_color, font=company_font)\r\n-\r\n-    # Save the generated badge image\r\n-    image_file = 'badge.png'\r\n-    background.save(image_file)\r\n-    \r\n-    return image_file\r\n-\r\n-# Function to send the generated image to the printer\r\n-def sendToPrint(image_file):\r\n-    # Define the print command using subprocess\r\n-    command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n-    \r\n-    try:\r\n-        # Execute the print command\r\n-        subprocess.run(command, shell=True, check=True)\r\n-        return \"Print command executed successfully.\"\r\n-    except subprocess.CalledProcessError as e:\r\n-        return f\"Error: Failed to execute print command. {e}\"\r\n-\r\n-# Route for the form page\r\n-@app.route('/')\r\n-def index():\r\n-    response = app.response_class()\r\n-    response.headers.set(\"ngrok-skip-browser-warning\", \"true\")\r\n-    return render_template('form.html'), 200, response.headers\r\n-\r\n-# Route to handle form submission and print the badge\r\n-@app.route('/submit', methods=['POST'])\r\n-def submit():\r\n-    if request.method == 'POST':\r\n-        # Retrieve data from the form\r\n-        fname = request.form['fname']\r\n-        lname = request.form['lname']\r\n-        company = request.form['company']\r\n-        contact = request.form['contact']\r\n-\r\n-        # Save data to CSV\r\n-        with open('data.csv', mode='a', newline='') as file:\r\n-            writer = csv.writer(file)\r\n-            writer.writerow([fname, lname, company, contact, 0])\r\n-\r\n-        # Generate the badge image\r\n-        image_file = getBadge(fname, lname, company)\r\n-\r\n-        # If badge generation was successful, send it to print\r\n-        if image_file:\r\n-            print_status = sendToPrint(\"./badge.png\")\r\n-            print(f\"{fname} {lname} {company} {contact}\")\r\n-            print(\"YES!!!!!!!!!!!!!!!!=========>\")\r\n-        else:\r\n-            print_status = \"Error: Badge generation failed.\"\r\n-\r\n-        return redirect('/')\r\n-\r\n-if __name__ == '__main__':\r\n-    app.run(debug=True)\r\n"
                },
                {
                    "date": 1729798027284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,12 @@\n \r\n         # If badge generation was successful, send it to print\r\n         if image_file:\r\n             print_status = sendToPrint(\"./badge.png\")\r\n-            print(f\"{fname} {lname} {company} {contact}\")\r\n+            print(f\"f-{fname}\")\r\n+            print(f\"l-{lname}\")\r\n+            print(f\"c-{company}\")\r\n+            print(f\"con-{contact}\")\r\n             print(\"YES!!!!!!!!!!!!!!!!=========>\")\r\n         else:\r\n             print_status = \"Error: Badge generation failed.\"\r\n \r\n"
                },
                {
                    "date": 1729798037668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n     command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n     \r\n     try:\r\n         # Execute the print command\r\n-        subprocess.run(command, shell=True, check=True)\r\n+        # subprocess.run(command, shell=True, check=True)\r\n         return \"Print command executed successfully.\"\r\n     except subprocess.CalledProcessError as e:\r\n         return f\"Error: Failed to execute print command. {e}\"\r\n \r\n"
                },
                {
                    "date": 1729798454625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n     command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n     \r\n     try:\r\n         # Execute the print command\r\n-        # subprocess.run(command, shell=True, check=True)\r\n+        subprocess.run(command, shell=True, check=True)\r\n         return \"Print command executed successfully.\"\r\n     except subprocess.CalledProcessError as e:\r\n         return f\"Error: Failed to execute print command. {e}\"\r\n \r\n@@ -83,10 +83,10 @@\n     if request.method == 'POST':\r\n         # Retrieve data from the form\r\n         fname = request.form['fname']\r\n         lname = request.form['lname']\r\n+        contact = request.form['contact']\r\n         company = request.form['company']\r\n-        contact = request.form['contact']\r\n \r\n         # Save data to CSV\r\n         with open('data.csv', mode='a', newline='') as file:\r\n             writer = csv.writer(file)\r\n"
                },
                {
                    "date": 1729798651243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n     company_font = ImageFont.truetype(\"roboto.ttf\", 56)  # Specify font and size\r\n     company_color = (111, 111, 111)  # grey color\r\n-    company_position = (left_margin+90, 490)  # Position for company text\r\n+    company_position = (left_margin+45, 490)  # Position for company text\r\n     draw.text(company_position, company_text, fill=company_color, font=company_font)\r\n \r\n     # Save the generated badge image\r\n     image_file = 'badge.png'\r\n"
                },
                {
                    "date": 1729798720075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,112 @@\n+from flask import Flask, render_template, request, redirect\r\n+import csv\r\n+from PIL import Image, ImageDraw, ImageFont\r\n+from datetime import datetime\r\n+from flask_cors import CORS  # Import CORS\r\n+import subprocess\r\n+\r\n+app = Flask(__name__)\r\n+CORS(app)\r\n+\r\n+# Function to generate badge with user data\r\n+def getBadge(fname, lname, cname):\r\n+    # Create a new image with a white background\r\n+    height = 696\r\n+    width = 1109\r\n+    background_color = (255, 255, 255)  # white color\r\n+    background = Image.new('RGB', (width, height), background_color)\r\n+\r\n+    # Open and resize the logo image to overlay as background\r\n+    try:\r\n+        background_image = Image.open('./t3.bmp')  # Logo should be in the project folder\r\n+        # background_image = background_image.resize((400, 400))\r\n+    except IOError:\r\n+        return \"Error: Logo file not found!\"\r\n+\r\n+    # Paste the logo onto the new image\r\n+    background.paste(background_image, (0, 0))\r\n+\r\n+    # Add text (first name, last name, company) to the image\r\n+    draw = ImageDraw.Draw(background)\r\n+    \r\n+    left_margin = 450\r\n+    \r\n+    # Add fname\r\n+    name_text = f\"{fname}\"\r\n+    name_font = ImageFont.truetype(\"roboto.ttf\", 96)  # Specify font and size\r\n+    name_color = (0, 0, 0)  # black color\r\n+    name_position = (left_margin-70, 70)  # Position for name text\r\n+    draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n+    \r\n+    # Add lname\r\n+    name_text = f\"{lname}\"\r\n+    name_font = ImageFont.truetype(\"roboto.ttf\", 96)  # Specify font and size\r\n+    name_color = (0, 0, 0)  # black color\r\n+    name_position = (left_margin-70, 200)  # Position for name text\r\n+    draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n+    \r\n+    # Add company name\r\n+    company_text = f\"{cname}\"\r\n+    company_font = ImageFont.truetype(\"roboto.ttf\", 0)  # Specify font and size\r\n+    company_color = (111, 111, 111)  # grey color\r\n+    company_position = (left_margin+45, 490)  # Position for company text\r\n+    draw.text(company_position, company_text, fill=company_color, font=company_font)\r\n+\r\n+    # Save the generated badge image\r\n+    image_file = 'badge.png'\r\n+    background.save(image_file)\r\n+    \r\n+    return image_file\r\n+\r\n+# Function to send the generated image to the printer\r\n+def sendToPrint(image_file):\r\n+    # Define the print command using subprocess\r\n+    command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n+    \r\n+    try:\r\n+        # Execute the print command\r\n+        subprocess.run(command, shell=True, check=True)\r\n+        return \"Print command executed successfully.\"\r\n+    except subprocess.CalledProcessError as e:\r\n+        return f\"Error: Failed to execute print command. {e}\"\r\n+\r\n+# Route for the form page\r\n+@app.route('/')\r\n+def index():\r\n+    response = app.response_class()\r\n+    response.headers.set(\"ngrok-skip-browser-warning\", \"true\")\r\n+    return render_template('form.html'), 200, response.headers\r\n+\r\n+# Route to handle form submission and print the badge\r\n+@app.route('/submit', methods=['POST'])\r\n+def submit():\r\n+    if request.method == 'POST':\r\n+        # Retrieve data from the form\r\n+        fname = request.form['fname']\r\n+        lname = request.form['lname']\r\n+        contact = request.form['contact']\r\n+        company = request.form['company']\r\n+\r\n+        # Save data to CSV\r\n+        with open('data.csv', mode='a', newline='') as file:\r\n+            writer = csv.writer(file)\r\n+            writer.writerow([fname, lname, company, contact, 0])\r\n+\r\n+        # Generate the badge image\r\n+        image_file = getBadge(fname, lname, company)\r\n+\r\n+        # If badge generation was successful, send it to print\r\n+        if image_file:\r\n+            print_status = sendToPrint(\"./badge.png\")\r\n+            print(f\"f-{fname}\")\r\n+            print(f\"l-{lname}\")\r\n+            print(f\"c-{company}\")\r\n+            print(f\"con-{contact}\")\r\n+            print(\"YES!!!!!!!!!!!!!!!!=========>\")\r\n+        else:\r\n+            print_status = \"Error: Badge generation failed.\"\r\n+\r\n+        return redirect('/')\r\n+\r\n+if __name__ == '__main__':\r\n+    app.run(debug=True)\r\n"
                },
                {
                    "date": 1729798726481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n     command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n     \r\n     try:\r\n         # Execute the print command\r\n-        subprocess.run(command, shell=True, check=True)\r\n+        # subprocess.run(command, shell=True, check=True)\r\n         return \"Print command executed successfully.\"\r\n     except subprocess.CalledProcessError as e:\r\n         return f\"Error: Failed to execute print command. {e}\"\r\n \r\n@@ -109,116 +109,4 @@\n         return redirect('/')\r\n \r\n if __name__ == '__main__':\r\n     app.run(debug=True)\r\n-from flask import Flask, render_template, request, redirect\r\n-import csv\r\n-from PIL import Image, ImageDraw, ImageFont\r\n-from datetime import datetime\r\n-from flask_cors import CORS  # Import CORS\r\n-import subprocess\r\n-\r\n-app = Flask(__name__)\r\n-CORS(app)\r\n-\r\n-# Function to generate badge with user data\r\n-def getBadge(fname, lname, cname):\r\n-    # Create a new image with a white background\r\n-    height = 696\r\n-    width = 1109\r\n-    background_color = (255, 255, 255)  # white color\r\n-    background = Image.new('RGB', (width, height), background_color)\r\n-\r\n-    # Open and resize the logo image to overlay as background\r\n-    try:\r\n-        background_image = Image.open('./t3.bmp')  # Logo should be in the project folder\r\n-        # background_image = background_image.resize((400, 400))\r\n-    except IOError:\r\n-        return \"Error: Logo file not found!\"\r\n-\r\n-    # Paste the logo onto the new image\r\n-    background.paste(background_image, (0, 0))\r\n-\r\n-    # Add text (first name, last name, company) to the image\r\n-    draw = ImageDraw.Draw(background)\r\n-    \r\n-    left_margin = 450\r\n-    \r\n-    # Add fname\r\n-    name_text = f\"{fname}\"\r\n-    name_font = ImageFont.truetype(\"roboto.ttf\", 96)  # Specify font and size\r\n-    name_color = (0, 0, 0)  # black color\r\n-    name_position = (left_margin-70, 70)  # Position for name text\r\n-    draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n-    \r\n-    # Add lname\r\n-    name_text = f\"{lname}\"\r\n-    name_font = ImageFont.truetype(\"roboto.ttf\", 96)  # Specify font and size\r\n-    name_color = (0, 0, 0)  # black color\r\n-    name_position = (left_margin-70, 200)  # Position for name text\r\n-    draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n-    \r\n-    # Add company name\r\n-    company_text = f\"{cname}\"\r\n-    company_font = ImageFont.truetype(\"roboto.ttf\", 56)  # Specify font and size\r\n-    company_color = (111, 111, 111)  # grey color\r\n-    company_position = (left_margin+45, 490)  # Position for company text\r\n-    draw.text(company_position, company_text, fill=company_color, font=company_font)\r\n-\r\n-    # Save the generated badge image\r\n-    image_file = 'badge.png'\r\n-    background.save(image_file)\r\n-    \r\n-    return image_file\r\n-\r\n-# Function to send the generated image to the printer\r\n-def sendToPrint(image_file):\r\n-    # Define the print command using subprocess\r\n-    command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n-    \r\n-    try:\r\n-        # Execute the print command\r\n-        subprocess.run(command, shell=True, check=True)\r\n-        return \"Print command executed successfully.\"\r\n-    except subprocess.CalledProcessError as e:\r\n-        return f\"Error: Failed to execute print command. {e}\"\r\n-\r\n-# Route for the form page\r\n-@app.route('/')\r\n-def index():\r\n-    response = app.response_class()\r\n-    response.headers.set(\"ngrok-skip-browser-warning\", \"true\")\r\n-    return render_template('form.html'), 200, response.headers\r\n-\r\n-# Route to handle form submission and print the badge\r\n-@app.route('/submit', methods=['POST'])\r\n-def submit():\r\n-    if request.method == 'POST':\r\n-        # Retrieve data from the form\r\n-        fname = request.form['fname']\r\n-        lname = request.form['lname']\r\n-        contact = request.form['contact']\r\n-        company = request.form['company']\r\n-\r\n-        # Save data to CSV\r\n-        with open('data.csv', mode='a', newline='') as file:\r\n-            writer = csv.writer(file)\r\n-            writer.writerow([fname, lname, company, contact, 0])\r\n-\r\n-        # Generate the badge image\r\n-        image_file = getBadge(fname, lname, company)\r\n-\r\n-        # If badge generation was successful, send it to print\r\n-        if image_file:\r\n-            print_status = sendToPrint(\"./badge.png\")\r\n-            print(f\"f-{fname}\")\r\n-            print(f\"l-{lname}\")\r\n-            print(f\"c-{company}\")\r\n-            print(f\"con-{contact}\")\r\n-            print(\"YES!!!!!!!!!!!!!!!!=========>\")\r\n-        else:\r\n-            print_status = \"Error: Badge generation failed.\"\r\n-\r\n-        return redirect('/')\r\n-\r\n-if __name__ == '__main__':\r\n-    app.run(debug=True)\r\n"
                },
                {
                    "date": 1729798797251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,11 +46,11 @@\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n-    company_font = ImageFont.truetype(\"roboto.ttf\", 0)  # Specify font and size\r\n+    company_font = ImageFont.truetype(\"roboto.ttf\", 50)  # Specify font and size\r\n     company_color = (111, 111, 111)  # grey color\r\n-    company_position = (left_margin+45, 490)  # Position for company text\r\n+    company_position = (left_margin, 490)  # Position for company text\r\n     draw.text(company_position, company_text, fill=company_color, font=company_font)\r\n \r\n     # Save the generated badge image\r\n     image_file = 'badge.png'\r\n@@ -64,9 +64,9 @@\n     command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n     \r\n     try:\r\n         # Execute the print command\r\n-        # subprocess.run(command, shell=True, check=True)\r\n+        subprocess.run(command, shell=True, check=True)\r\n         return \"Print command executed successfully.\"\r\n     except subprocess.CalledProcessError as e:\r\n         return f\"Error: Failed to execute print command. {e}\"\r\n \r\n"
                },
                {
                    "date": 1729798870068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n-    company_font = ImageFont.truetype(\"roboto.ttf\", 50)  # Specify font and size\r\n+    company_font = ImageFont.truetype(\"roboto.ttf\", 45)  # Specify font and size\r\n     company_color = (111, 111, 111)  # grey color\r\n     company_position = (left_margin, 490)  # Position for company text\r\n     draw.text(company_position, company_text, fill=company_color, font=company_font)\r\n \r\n@@ -64,9 +64,9 @@\n     command = f\"brother_ql -p tcp://10.4.6.76 -m QL-820NWB print -l 62x100 {image_file}\"\r\n     \r\n     try:\r\n         # Execute the print command\r\n-        subprocess.run(command, shell=True, check=True)\r\n+        # subprocess.run(command, shell=True, check=True)\r\n         return \"Print command executed successfully.\"\r\n     except subprocess.CalledProcessError as e:\r\n         return f\"Error: Failed to execute print command. {e}\"\r\n \r\n"
                },
                {
                    "date": 1729798875276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n     # Add lname\r\n     name_text = f\"{lname}\"\r\n     name_font = ImageFont.truetype(\"roboto.ttf\", 96)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n-    name_position = (left_margin-70, 200)  # Position for name text\r\n+    name_position = (left_margin-70, 210)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n"
                },
                {
                    "date": 1729798880647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n     # Add fname\r\n     name_text = f\"{fname}\"\r\n     name_font = ImageFont.truetype(\"roboto.ttf\", 96)  # Specify font and size\r\n     name_color = (0, 0, 0)  # black color\r\n-    name_position = (left_margin-70, 70)  # Position for name text\r\n+    name_position = (left_margin-70, 65)  # Position for name text\r\n     draw.text(name_position, name_text, fill=name_color, font=name_font)\r\n     \r\n     # Add lname\r\n     name_text = f\"{lname}\"\r\n"
                },
                {
                    "date": 1729798926350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n     # Add company name\r\n     company_text = f\"{cname}\"\r\n     company_font = ImageFont.truetype(\"roboto.ttf\", 45)  # Specify font and size\r\n     company_color = (111, 111, 111)  # grey color\r\n-    company_position = (left_margin, 490)  # Position for company text\r\n+    company_position = (left_margin, 470)  # Position for company text\r\n     draw.text(company_position, company_text, fill=company_color, font=company_font)\r\n \r\n     # Save the generated badge image\r\n     image_file = 'badge.png'\r\n"
                }
            ],
            "date": 1729789107734,
            "name": "Commit-0",
            "content": "from flask import Flask, render_template, request, redirect\r\nimport csv\r\n\r\napp = Flask(__name__)\r\n\r\n# Route for the form page\r\n@app.route('/')\r\ndef index():\r\n    return render_template('./templates/form.html')\r\n\r\n# Route to handle form submission\r\n@app.route('/submit', methods=['POST'])\r\ndef submit():\r\n    if request.method == 'POST':\r\n        fname = request.form['fname']\r\n        lname = request.form['lname']\r\n        company = request.form['company']\r\n        contact = request.form['contact']\r\n        printed = 'No'\r\n\r\n        # Save to CSV\r\n        with open('data.csv', mode='a', newline='') as file:\r\n            writer = csv.writer(file)\r\n            writer.writerow([fname, lname, company, contact, printed])\r\n\r\n        return redirect('/')\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True)\r\n"
        }
    ]
}